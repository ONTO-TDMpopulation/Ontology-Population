a finger tree is a purely functional data structure that can be used to efficiently implement other functional data structures.  A finger tree gives amortized constant time access to the "fingers" (leaves) of the tree, which is where data is stored, and concatenation and splitting logarithmic time in the size of the smaller piece. It also stores in each internal node the result of applying some associative operation to its descendants.  This "summary" data stored in the internal nodes can be used to provide the functionality of data structures other than trees.

Finger trees also make efficient deques. Whether the structure is persistent or not, all operations take Î˜(1) amortized time. The analysis can be compared to Okasaki's implicit deques, the only difference being that the FingerTree type stores Nodes instead of pairs.

Finger trees can efficiently implement random-access sequences. This should support fast positional operations including accessing the nth element and splitting a sequence at a certain position. To do this, we annotate the finger tree with sizes.The N is for natural numbers. The new type is needed because the type is the carrier of different monoids. 



