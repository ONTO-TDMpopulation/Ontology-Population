Linked List can be defined as collection of objects called nodes that are randomly stored in the memory. A node contains two fields, data stored at that particular address and the pointer which contains the address of the next node in the memory. The last node of the list contains pointer to the null. The list is not required to be contiguously present in the memory. The node can reside any where in the memory and linked together to make a list. This achieves optimized utilization of space. list size is limited to the memory size and doesn't need to be declared in advance. Empty node can not be present in the linked list. We can store values of primitive types or objects in the singly linked list. 

A linked list is a data structure consisting of a sequence of nodes, where each node contains a data element and a reference (or pointer) to the next node in the sequence. The most common operations performed on a linked list are element insertion, element deletion, and element searching.

Element insertion involves adding a new node to the linked list. This can be done at the beginning, end, or any position in the middle of the list. To insert a new node, the reference of the preceding node is updated to point to the new node, and the reference of the new node is updated to point to the node that follows it. The time complexity of element insertion in a linked list is O(1) for insertion at the beginning or end, and O(n) for insertion at a specific position in the middle of the list, where n is the number of nodes in the list.

Element deletion involves removing a node from the linked list. This can also be done at the beginning, end, or any position in the middle of the list. To delete a node, the reference of the preceding node is updated to point to the node that follows the node to be deleted, and the reference of the node to be deleted is set to null. The time complexity of element deletion in a linked list is also O(1) for deletion at the beginning or end, and O(n) for deletion at a specific position in the middle of the list.

Element searching involves finding a specific node in the linked list. This is done by traversing the list starting from the beginning until the desired node is found or the end of the list is reached. The time complexity of element searching in a linked list is O(n), where n is the number of nodes in the list.

Linked lists are useful for situations where frequent element insertion or deletion is required, as they have a constant time complexity for these operations at the beginning or end of the list. However, they are less efficient for element searching compared to other data structures like arrays, which have a constant time complexity for element access.